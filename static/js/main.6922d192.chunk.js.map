{"version":3,"sources":["ApiHandler.js","GetPrefecture.js","GetPopulation.js","Graph.js","App.js","index.js"],"names":["ApiHandler","url","method","useState","data","setdata","useEffect","fetch","headers","Resas","apikey","then","res","json","res_json","GetPrefecture","prefectures","result","undefined","GetPopulation","prefcode","popudata","setpopudata","url_prefix","res_data","update_population_data","Graph","props","options","title","text","chart","backgroundColor","linearGradient","stops","borderWidth","plotBackgroundColor","plotShadow","plotBorderWidth","yAxis","labels","formatter","this","value","xAxis","series","Object","keys","map","popu_data","population","sub_v","name","prefName","pointStart","year","pointInterval","id","highcharts","Highcharts","App","checked_num","setchecked_num","check","setcheck","pref_data","pref_names","v","htmlFor","prefCode","type","onClick","update_check","population_data","plot_data","filter","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6922d192.chunk.js","sourcesContent":["import Resas from \"./.api_key.json\";\nimport { useState, useEffect } from \"react\";\n\nfunction ApiHandler(url = \"\", method = \"GET\") {\n  const [data, setdata] = useState([]);\n  useEffect(() => {\n    fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n        \"X-API-KEY\": Resas.apikey,\n      },\n    })\n      .then((res) => res.json())\n      .then((res_json) => {\n        setdata(res_json);\n      });\n  }, [url]);\n\n  return data;\n}\n\nexport default ApiHandler;\n","import ApiHandler from \"./ApiHandler\";\n\nfunction GetPrefecture() {\n  const res_data = ApiHandler(\n    \"https://opendata.resas-portal.go.jp/api/v1/prefectures\"\n  );\n\n  const prefectures = res_data.result;\n\n  if (prefectures != undefined) {\n    return prefectures;\n  } else return [];\n}\n\nexport default GetPrefecture;\n","import ApiHandler from \"./ApiHandler\";\nimport { useState, useEffect } from \"react\";\n\nfunction GetPopulation(prefcode) {\n  const [popudata, setpopudata] = useState({});\n\n  const url_prefix =\n    \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\";\n  let url;\n\n  // 2回以上のリクエスト発行を防いでいる\n  if (prefcode === 0 || typeof popudata[prefcode] !== \"undefined\") {\n    url = url_prefix + 0;\n  } else {\n    url = url_prefix + prefcode;\n  }\n  const res_data = ApiHandler(url);\n\n  useEffect(() => {\n    if (typeof res_data.result !== \"undefined\" && res_data.result !== null) {\n      let update_population_data = { ...popudata };\n      update_population_data[prefcode] = res_data.result.data[0].data;\n      setpopudata(update_population_data);\n    }\n  }, [res_data]);\n\n  return popudata;\n}\n\nexport default GetPopulation;\n","import React from \"react\";\nimport \"./Graph.css\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nfunction Graph(props) {\n  const plot_data = props[Object.keys(props)].map((value) => {\n    const popu_data = value.population.map((sub_v) => sub_v.value);\n    return {\n      name: value.prefName,\n      data: popu_data,\n      pointStart: value.population[0].year,\n      pointInterval: value.population[1].year - value.population[0].year,\n    };\n  });\n  // console.log(plot_data);\n\n  const options = {\n    title: {\n      text: \"\",\n    },\n    chart: {\n      backgroundColor: {\n        linearGradient: [0, 0, 1, 1],\n        stops: [\n          [0, \"rgb(240, 240, 255)\"],\n          [1, \"rgb(240, 240, 255)\"],\n        ],\n      },\n      borderWidth: 1,\n      plotBackgroundColor: \"rgba(255, 255, 255, .9)\",\n      plotShadow: true,\n      plotBorderWidth: 1,\n    },\n    yAxis: {\n      title: {\n        text: \"人口数（人）\",\n      },\n      labels: {\n        formatter: function () {\n          return this.value / 10000 + \" 万\";\n        },\n      },\n    },\n    xAxis: {\n      title: {\n        text: \"年\",\n      },\n    },\n    series: plot_data,\n  };\n\n  return (\n    <div id=\"graph\">\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n}\n\nexport default Graph;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport GetPrefecture from \"./GetPrefecture\";\nimport GetPopulation from \"./GetPopulation\";\nimport Graph from \"./Graph\";\n\nfunction App() {\n  const [checked_num, setchecked_num] = useState(0);\n  const [check, setcheck] = useState([]);\n\n  const pref_data = GetPrefecture();\n  const pref_names = pref_data.map((v) => {\n    return (\n      <label key={`pref_${v.prefCode}`} htmlFor={v.prefCode}>\n        <input\n          type=\"checkbox\"\n          id={v.prefCode}\n          onClick={() => {\n            let update_check = { ...check };\n            update_check[v.prefCode] = !update_check[v.prefCode];\n            setchecked_num(v.prefCode);\n            setcheck(update_check);\n          }}\n        />\n        {v.prefName}\n      </label>\n    );\n  });\n\n  const population_data = GetPopulation(check[checked_num] ? checked_num : 0);\n  const plot_data = Object.keys(population_data)\n    .filter((keys) => check[keys] == true)\n    .map((keys) => ({\n      prefName: pref_data[keys - 1].prefName,\n      population: population_data[keys],\n    }));\n\n  return (\n    <div className=\"App\">\n      <h1>総人口推移グラフ</h1>\n      <div id=\"prefecture\">{pref_names}</div>\n      <Graph props={plot_data} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}